import streamlit as st
import pandas as pd
from pathlib import Path

@st.cache_data
def load_database():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
        df = pd.read_csv("hs_code_database.csv", dtype={'HS2': str, 'HS4': str, 'HS6': str, 'HS8': str, 'HS10': str})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
        required_columns = {'HS2', 'HS4', 'HS6', 'HS8', 'HS10'}
        if not required_columns.issubset(df.columns):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV —Ñ–∞–π–ª–∞")
            
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df = df.dropna(subset=['HS6', 'HS8', 'HS10'])
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
        hs6_series = df['HS6'].drop_duplicates().reset_index(drop=True)
        hs8_series = df['HS8'].drop_duplicates().reset_index(drop=True)
        hs10_series = df['HS10'].drop_duplicates().reset_index(drop=True)
        
        return hs6_series, hs8_series, hs10_series
    
    except FileNotFoundError:
        st.error("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        st.stop()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.title("HS Code Transfiguration Tool - –†–∞—Å—Ö–ª–æ–ø—É—à–∫–∞ –≤–µ—Ä—Å–∏–∏ 2.0")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
hs6_series, hs8_series, hs10_series = load_database()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
st.markdown(f"""
<div style="background-color:#f0f2f6; padding:10px; border-radius:5px;">
    <p style="font-size:14px; color:#333; text-align:center;">
        –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:<br>
        6-–∑–Ω–∞—á–Ω—ã—Ö: 7183 —à—Ç.<br>
        8-–∑–Ω–∞—á–Ω—ã—Ö: 17118 —à—Ç.<br>
        10-–∑–Ω–∞—á–Ω—ã—Ö: 24339 —à—Ç.<br>
        –ü–æ –æ—Ç–∑—ã–≤–∞–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ –µ—ë —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ê–ª–µ–∫—Å–µ—é –•–∞–∏—Ä–æ–≤—É.
    </p>
</div>
""", unsafe_allow_html=True)

# –≠–ª–µ–º–µ–Ω—Ç—ã GUI
input_codes = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –¢–ù –í–≠–î —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞ 2-—Ö, 4-—Ö –∏–ª–∏ 6-—Ç–∏ –∑–Ω–∞–∫–∞—Ö):")
col1, col2, col3 = st.columns(3)

with col1:
    process_btn6 = st.button("–†–∞—Å—Ö–ª–æ–ø–Ω—É—Ç—å –¥–æ 6-—Ç–∏ –∑–Ω–∞–∫–æ–≤")
with col2:
    process_btn8 = st.button("–†–∞—Å—Ö–ª–æ–ø–Ω—É—Ç—å –¥–æ 8-—Ç–∏ –∑–Ω–∞–∫–æ–≤")
with col3:
    process_btn10 = st.button("–†–∞—Å—Ö–ª–æ–ø–Ω—É—Ç—å –¥–æ 10-—Ç–∏ –∑–Ω–∞–∫–æ–≤")

output_area = st.empty()

def process_codes(codes, target_series, valid_lengths, level):
    results = []
    errors = []
    
    for code in codes:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
        if not code.isdigit():
            errors.append(f"üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥: {code} (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)")
            continue
            
        code_len = len(code)
        if code_len not in valid_lengths:
            errors.append(f"üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–ª—è {level}-–∑–Ω–∞–∫–æ–≤: {code} ({code_len} —Ü–∏—Ñ—Ä)")
            continue
            
        # –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
            matches = target_series[target_series.str.startswith(code, na=False)].tolist()
            
            if not matches:
                errors.append(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è: {code}")
            else:
                results.extend(matches)
        except Exception as e:
            errors.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ {code}: {str(e)}")
    
    return results, errors

def display_results(results, errors, level):
    output = []
    if results:
        unique_results = sorted(set(results))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        output.append(f"‚úÖ –ò–∑ –±–∞–∑—ã –§–¢–° –≤—ã—Ç–∞—â–µ–Ω–æ {len(unique_results)} –∫–æ–¥–æ–≤ –Ω–∞ {level}-—Ç–∏ –∑–Ω–∞–∫–∞—Ö:")
        output.extend(unique_results)
        
    if errors:
        output.append("\n---\n–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö:")
        output.extend(errors)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if output:
        output_area.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", 
                            value="\n".join(output), 
                            height=400,
                            help="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é Ctrl+C –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ Excel –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã")
    else:
        output_area.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
if input_codes:
    codes = input_codes.strip().split()
    
    if process_btn6:
        results, errors = process_codes(codes, hs6_series, {2, 4}, 6)
        display_results(results, errors, 6)
        
    elif process_btn8:
        results, errors = process_codes(codes, hs8_series, {2, 4, 6}, 8)
        display_results(results, errors, 8)
        
    elif process_btn10:
        results, errors = process_codes(codes, hs10_series, {2, 4, 6, 8}, 10)
        display_results(results, errors, 10)
        
else:
    if process_btn6 or process_btn8 or process_btn10:
        output_area.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞")
